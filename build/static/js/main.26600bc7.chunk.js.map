{"version":3,"sources":["components/Note.jsx","services/notes.js","components/Notification.jsx","components/Footer.jsx","App.js","index.js"],"names":["Note","note","toggleimportance","label","important","onClick","className","content","baseUrl","noteService","getAll","request","axios","get","nonExisting","id","date","then","response","data","concat","create","newObject","post","update","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","initialNotes","notesToShow","filter","map","find","n","changeNote","returnNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","returnedNote","value","onChange","target","tipe","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.26600bc7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleimportance }) => {\r\n  const label = note.important\r\n    ? 'make not important' : 'make importanr'\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={toggleimportance} >{label}</button>\r\n      <li className='note' >\r\n        {note.content}\r\n      </li>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    const nonExisting = {\r\n        id: 10000,\r\n        content: 'This note is not saved to server',\r\n        date: '2019-05-30T17:30:31.098Z',\r\n        important: true,\r\n      }\r\n      return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\nconst noteService = {getAll,create,update}\r\nexport default noteService","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n  export default Notification","import React from 'react'\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\r\n    </div>\r\n  )\r\n}\r\nexport default Footer","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('a new note...')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage,setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes=> {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5\n    }\n    noteService\n    .create(noteObject)\n    .then(returnedNote => {\n      setNotes(notes.concat(returnedNote))\n      setNewNote('')\n    })\n  }\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n  const notesToShow = showAll \n  ? notes \n  : notes.filter(note => note.important === true)\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changeNote = {...note,important: !note.important}\n\n    noteService\n    .update(id, changeNote)\n    .then(returnNote => {\n    setNotes(notes.map(note => note.id !== id ? note : returnNote))\n    })\n    .catch(error => {\n      setErrorMessage(\n        `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      setNotes(notes.filter(n => n.id !== id))\n    })\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note =>\n          <Note\n          key={note.id} \n          note={note}\n          toggleimportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote} >\n        <input \n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button tipe='submit' >save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\n\n  ReactDOM.render(\n    <App  />,\n    document.getElementById('root')\n  )\n\n\n\n"],"sourceRoot":""}